#!/bin/bash

# Script to set up local development environment
# This script configures a development environment that mirrors
# the production structure with a single .env file

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${GREEN}Setting up development environment for mlorente.dev${NC}"

# Check requirements
echo -e "${BLUE}Checking requirements...${NC}"

# Check Docker
if ! command -v docker &> /dev/null; then
    echo -e "${RED}Error: Docker is not installed.${NC}"
    echo "Install from: https://docs.docker.com/get-docker/"
    exit 1
fi

# Check Docker Compose
if ! command -v docker-compose &> /dev/null; then
    echo -e "${RED}Error: Docker Compose is not installed.${NC}"
    echo "Install from: https://docs.docker.com/compose/install/"
    exit 1
fi

# Create unified .env file if it doesn't exist
echo -e "${BLUE}Creating .env file for development...${NC}"

if [ ! -f ".env.dev" ]; then
    cat > .env.dev <<EOL
# Environment Variables - Development
# Automatically generated by dev-setup.sh

# Environment
ENV=development

# Application
SITE_TITLE=mlorente.dev
SITE_DESCRIPTION=Manuel Lorente's personal blog
SITE_DOMAIN=localhost
SITE_URL=http://localhost:3000
SITE_MAIL=mlorentedev@gmail.com
SITE_AUTHOR=Manuel Lorente
SITE_KEYWORDS=devops, cloud, kubernetes, aws, azure, python, go

# Social Media
TWITTER_URL=https://twitter.com/mlorentedev
YOUTUBE_URL=https://youtube.com/@mlorentedev
GITHUB_URL=https://github.com/mlorentedev
CALENDLY_URL=
BUY_ME_A_COFFEE_URL=

# Integrations
GOOGLE_ANALYTICS_ID=

# Feature Flags
ENABLE_HOMELABS=true
ENABLE_BLOG=true
ENABLE_CONTACT=true

# Backend API
BACKEND_URL=http://backend:8080

# Beehiiv
BEEHIIV_API_KEY=dev_key
BEEHIIV_PUB_ID=dev_pub

# Email
EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=587
EMAIL_SECURE=false
EMAIL_USER=
EMAIL_PASS=
EOL
    echo -e "${GREEN}✓ .env.dev file created.${NC}"
else
    echo -e "${YELLOW}.env.dev file already exists.${NC}"
fi

# Create docker-compose.dev.yml
echo -e "${BLUE}Creating docker-compose for development...${NC}"

if [ ! -f "docker-compose.dev.yml" ]; then
    cat > docker-compose.dev.yml <<EOL
version: '3.8'

services:
  frontend:
    build:
      context: .
      dockerfile: docker/frontend/Dockerfile.dev
    ports:
      - "3000:4321"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    env_file:
      - .env.dev
    networks:
      - app-network
    depends_on:
      - backend

  backend:
    build:
      context: .
      dockerfile: docker/backend/Dockerfile.dev
    ports:
      - "8080:8080"
    volumes:
      - ./backend:/app
    env_file:
      - .env.dev
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
EOL
    echo -e "${GREEN}✓ docker-compose.dev.yml file created.${NC}"
else
    echo -e "${YELLOW}docker-compose.dev.yml file already exists.${NC}"
fi

# Create Dockerfile.dev for frontend
if [ ! -f "docker/frontend/Dockerfile.dev" ]; then
    mkdir -p docker/frontend
    cat > docker/frontend/Dockerfile.dev <<EOL
FROM node:20-alpine

WORKDIR /app

# Copy package.json and package-lock.json
COPY frontend/package*.json ./

# Install dependencies
RUN npm ci

# Copy remaining files
COPY frontend .

# Expose port
EXPOSE 4321

# Start in development mode
CMD ["npm", "run", "dev", "--", "--host", "0.0.0.0"]
EOL
    echo -e "${GREEN}✓ docker/frontend/Dockerfile.dev file created.${NC}"
else
    echo -e "${YELLOW}docker/frontend/Dockerfile.dev file already exists.${NC}"
fi

# Create Dockerfile.dev for backend
if [ ! -f "docker/backend/Dockerfile.dev" ]; then
    mkdir -p docker/backend
    cat > docker/backend/Dockerfile.dev <<EOL
FROM golang:1.21-alpine

WORKDIR /app

# Install development tools
RUN go install github.com/cosmtrek/air@latest

# Copy Go modules
COPY backend/go.mod backend/go.sum ./

# Download dependencies
RUN go mod download

# Copy source code
COPY backend .

# Expose port
EXPOSE 8080

# Use air for hot-reload
CMD ["air", "-c", ".air.toml"]
EOL
    echo -e "${GREEN}✓ docker/backend/Dockerfile.dev file created.${NC}"
else
    echo -e "${YELLOW}docker/backend/Dockerfile.dev file already exists.${NC}"
fi

# Create configuration for air (Go hot-reload)
if [ ! -f "backend/.air.toml" ]; then
    mkdir -p backend
    cat > backend/.air.toml <<EOL
root = "."
tmp_dir = "tmp"
[build]
  bin = "./tmp/main"
  cmd = "go build -o ./tmp/main ./cmd/server"
  delay = 1000
  exclude_dir = ["assets", "tmp", "vendor"]
  exclude_file = []
  exclude_regex = ["_test.go"]
  exclude_unchanged = false
  follow_symlink = false
  full_bin = ""
  include_dir = []
  include_ext = ["go", "tpl", "tmpl", "html"]
  kill_delay = "0s"
  log = "build-errors.log"
  send_interrupt = false
  stop_on_error = true
[color]
  app = ""
  build = "yellow"
  main = "magenta"
  runner = "green"
  watcher = "cyan"
[log]
  time = false
[misc]
  clean_on_exit = false
EOL
    echo -e "${GREEN}✓ backend/.air.toml file created.${NC}"
else
    echo -e "${YELLOW}backend/.air.toml file already exists.${NC}"
fi

echo -e "\n${GREEN}Development environment setup completed.${NC}"
echo -e "To start the development environment, run:"
echo -e "${YELLOW}docker-compose -f docker-compose.dev.yml up -d${NC}"
echo -e "To view logs:"
echo -e "${YELLOW}docker-compose -f docker-compose.dev.yml logs -f${NC}"
echo -e "To stop the environment:"
echo -e "${YELLOW}docker-compose -f docker-compose.dev.yml down${NC}"