# Cursor Rules

You are an expert in JavaScript, TypeScript, and Astro framework for scalable web development.

## Technology Stack

UI Layer:

- Framework: Astro
- Styling: TailwindCSS
- Icons: Lucide Icons
- File Pattern: \*.astro

Interactivity Layer:

- Language: TypeScript
- Frameworks: HTMX
- File Pattern: _.ts, .tsx

Development Guidelines:

- Enforce strict TypeScript settings for type safety
- Use DaisyUI and TailwindCSS with utility-first approach (never use @apply)
- Create modular, reusable Astro components
- Maintain clear separation of concerns
- Implement proper cache control headers
- Sanitize HTML content using DOMPurify
- Use Markdown for content formatting (marked)
- Leverage Astro's partial hydration and multi-framework support
- Prioritize static generation and minimal JavaScript
- Use descriptive variable names and follow Astro's conventions

## Naming Conventions

- Use camelCase for variables and function names
- Use PascalCase for class and component names
- Use UPPER_SNAKE_CASE for constants
- Choose descriptive and meaningful names that explain the purpose

## Function and Method Guidelines

- Keep functions small and focused (ideally under 50 lines)
- Each function should do one thing and do it well
- Prefer pure functions that don't have side effects
- Use meaningful parameter names
- Include clear documentation for complex functions

## Error Handling

- Always handle potential errors
- Use try-catch blocks for error-prone operations
- Log errors with meaningful context
- Provide user-friendly error messages
- Never silence errors without good reason

## Project Structure

- src/
  - components/
  - content/
  - layouts/
  - pages/
  - styles/
- public/
- utils/
- tests/
- .env
- astro.config.mjs
- tailwind.config.mjs
- tsconfig.json

Component Development:

- Create .astro files for Astro components
- Use framework-specific components when necessary
- Implement proper component composition
- Use Astro's component props for data passing
- Leverage built-in components like Markdown

Routing and Pages:

- Utilize file-based routing in src/pages/
- Implement dynamic routes using [...slug].astro
- Use getStaticPaths() for static page generation
- Implement proper 404 handling

Content Management:

- Use Markdown (.md) or MDX (.mdx) for content-heavy pages
- Leverage frontmatter in Markdown files
- Implement content collections

Performance Optimization:

- Minimize client-side JavaScript
- Use client:\* directives judiciously:
  - client:load for immediate needs
  - client:idle for non-critical
  - client:visible for viewport-based
- Implement proper lazy loading
- Utilize built-in asset optimization

## General Approach

- Optimize for readability first
- Profile and measure before optimizing
- Use built-in language features
- Avoid premature optimization
- Be mindful of time and space complexity

## Common Performance Considerations

- Use appropriate data structures
- Minimize DOM manipulations
- Implement lazy loading where possible
- Use memoization for expensive computations
- Avoid unnecessary re-renders

Code Style Requirements:

- Indentation: 2 spaces (tabWidth: 2, useTabs: false)
- Enable format on save
- No trailing comma (trailingComma: "none")
- Line length: 120 characters (printWidth: 120)
- Trim trailing whitespace
- Ensure final newline
- Include path/filename as first comment
- Write purpose-focused comments
- Follow DRY principles
- Prioritize modularity and performance
- Use Astro-specific parser for .astro files
- Use prettier-plugin-astro for Astro file formatting

## Comments and Documentation

- Write comments to explain "why", not "what"
- Use JSDoc or similar documentation styles for functions
- Keep comments up-to-date with code changes
- Remove commented-out code before committing

Commit Message Standards:

- Use conventional commits with lowercase type and optional scope
- Keep messages concise (max 60 characters)
- Format: type(scope): description
- Include full commit command in suggestions
- Messages should be terminal-ready

## TypeScript-Specific Guidelines

- Enable strict null checks
- Use explicit typing
- Prefer interfaces over type aliases for object shapes
- Avoid any type whenever possible

## Import and Module Organization

- Group imports in this order:
  - Built-in modules
  - Third-party libraries
  - Local modules and components
- Sort imports alphabetically within each group
- Remove unused imports
