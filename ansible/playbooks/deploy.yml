# ansible/playbooks/deploy.yml
---
- name: Deploy application
  hosts: "{{ env }}"
  become: false
  vars:
    timestamp: "{{ lookup('pipe', 'date +%Y%m%d%H%M%S') }}"
    backup_dir: "{{ deploy_path }}/backups/{{ timestamp }}"
  
  tasks:
    - name: Create backup directory
      file:
        path: "{{ backup_dir }}"
        state: directory
        mode: '0755'
    
    - name: Backup current configuration
      copy:
        src: "{{ deploy_path }}/{{ item }}"
        dest: "{{ backup_dir }}/"
        remote_src: yes
      with_items:
        - core
      ignore_errors: true

    - name: Stop and remove existing containers (Traefik)
      docker_compose:
        project_src: /opt/traefik
        files:
          - docker-compose.traefik.yml
        state: absent
      ignore_errors: true

    - name: Stop and remove existing containers (Applications)
      docker_compose:
        project_src: "{{ deploy_path }}/core/infrastructure/docker-compose"
        files:
          - docker-compose.{{ env }}.yml
        state: absent
      ignore_errors: true

    - name: Copy docker-compose files
      copy:
        src: "{{ playbook_dir }}/../../core/infrastructure/docker-compose/"
        dest: "{{ deploy_path }}/core/infrastructure/docker-compose/"
        mode: '0644'
    
    - name: Copy Traefik configuration
      copy:
        src: "{{ playbook_dir }}/../../core/infrastructure/traefik/"
        dest: "/opt/traefik/"
        mode: '0644'

    - name: Update acme file
      file:
        path: "/opt/traefik/acme.json"
        state: touch
        mode: '0600'

    - name: Copy .env file to Traefik
      copy:
        src: "{{ deploy_path }}/core/infrastructure/docker-compose/.env"
        dest: "/opt/traefik/.env"
        remote_src: yes
        mode: '0644'

    - name: Deploy Traefik
      docker_compose:
        project_src: /opt/traefik
        files:
          - docker-compose.traefik.yml
      environment:
        DOMAIN: "{{ domain }}"
        TRAEFIK_USERS: "{{ traefik_users }}"
    
    - name: Deploy applications
      docker_compose:
        project_src: "{{ deploy_path }}/core/infrastructure/docker-compose"
        files:
          - docker-compose.{{ env }}.yml
      environment:
        DOMAIN: "{{ domain }}"
    
    - name: Wait services to be up
      pause:
        seconds: 10
    
    - name: Verify status
      shell: docker ps | grep jekyll-{{ env }}
      register: container_status
      failed_when: container_status.rc != 0
    
    - name: Deployment successful
      debug:
        msg: "Deployment to {{ env }} successful!"