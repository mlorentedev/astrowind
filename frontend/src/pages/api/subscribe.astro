---
import { env } from '../../data/env';

export const prerender = false;

if (Astro.request.method === 'POST') {
  try {
    // Determine payload based on content type
    let payload;
    const contentType = Astro.request.headers.get('content-type');

    if (contentType?.includes('application/json')) {
      const rawBody = await Astro.request.text();
      payload = JSON.parse(rawBody);
    } else if (contentType?.includes('application/x-www-form-urlencoded')) {
      const formData = await Astro.request.formData();
      payload = {
        email: formData.get('email')?.toString(),
        utm_source: formData.get('utm_source')?.toString() || 'landing_page',
        tags: []
      };
    } else {
      throw new Error('Unsupported content type');
    }

    // Validate email
    if (!payload.email) {
      return new Response('Correo electr√≥nico es requerido', {
        status: 400,
        headers: { 'Content-Type': 'text/plain' }
      });
    }

    // Normalize payload for backend
    const normalizedPayload = {
      email: payload.email,
      tags: payload.tags || [],
      utmSource: payload.utm_source || payload.utmSource || 'landing_page'
    };

    // Forward request to backend
    const response = await fetch(`${env.API.BACKEND_URL}/subscribe`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(normalizedPayload),
    });

    // Parse response
    const result = await response.json();

    console.log('Response from backend:', result);

    // Handle response based on success
    if (result.success) {
      return new Response(result.message, {
        status: 200,
        headers: { 
          'Content-Type': 'text/plain',
          'HX-Redirect': '/subscription-success'
        }
      });
    }

    // Handle existing subscriber or other errors
    return new Response(result.message, {
      status: 200,
      headers: { 
        'Content-Type': 'text/plain',
      }
    });
  } catch (error) {
    // Handle any unexpected errors
    console.error('Error en el servidor:', error);
    return new Response('Error interno del servidor', {
      status: 500,
      headers: { 
        'Content-Type': 'text/plain',
        'HX-Trigger': 'error'
      }
    });
  }
}

// Method not allowed
return new Response(null, { status: 405 });
---