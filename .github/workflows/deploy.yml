name: Deploy

on:
  repository_dispatch:
    types: [trigger-deploy]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      version:
        description: 'Version to deploy (default: latest for production, develop for staging)'
        required: false
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set environment variables
        run: |
          # Determine environment
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "DEPLOY_ENV=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
            
            # Determine version based on environment and input
            if [[ -n "${{ github.event.inputs.version }}" ]]; then
              echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
            elif [[ "${{ github.event.inputs.environment }}" == "production" ]]; then
              echo "VERSION=latest" >> $GITHUB_ENV
            else
              echo "VERSION=develop" >> $GITHUB_ENV
            fi
          else
            # In case of trigger from another workflow
            echo "DEPLOY_ENV=${{ github.event.client_payload.env }}" >> $GITHUB_ENV
            echo "VERSION=${{ github.event.client_payload.version }}" >> $GITHUB_ENV
            echo "COMPONENT=${{ github.event.client_payload.component }}" >> $GITHUB_ENV
          fi
          
          # Configure SSH and host based on environment
          if [[ "$DEPLOY_ENV" == "production" ]]; then
            echo "SSH_HOST=${{ secrets.PRODUCTION_HOST }}" >> $GITHUB_ENV
            echo "SSH_USER=${{ secrets.PRODUCTION_USERNAME }}" >> $GITHUB_ENV
            echo "SSH_KEY=PRODUCTION_SSH_KEY" >> $GITHUB_ENV
            echo "DEPLOY_PATH=/opt/mlorente" >> $GITHUB_ENV
          else
            echo "SSH_HOST=${{ secrets.STAGING_HOST }}" >> $GITHUB_ENV
            echo "SSH_USER=${{ secrets.STAGING_USERNAME }}" >> $GITHUB_ENV
            echo "SSH_KEY=STAGING_SSH_KEY" >> $GITHUB_ENV
            echo "DEPLOY_PATH=/opt/mlorente-staging" >> $GITHUB_ENV
          fi
      
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets[env.SSH_KEY] }}
      
      - name: Deploy to server
        run: |
          # Create temporary deployment script
          cat > deploy_script.sh << 'EOF'
          #!/bin/bash
          set -e
          
          # Deployment variables
          DEPLOY_ENV="${DEPLOY_ENV}"
          VERSION="${VERSION}"
          DEPLOY_PATH="${DEPLOY_PATH}"
          COMPONENT="${COMPONENT:-all}"
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          
          echo "===== STARTING DEPLOYMENT ====="
          echo "Environment: ${DEPLOY_ENV}"
          echo "Version: ${VERSION}"
          echo "Component: ${COMPONENT}"
          echo "Directory: ${DEPLOY_PATH}"
          echo "==============================="
          
          # Create backup directory
          BACKUP_DIR="${DEPLOY_PATH}/backups/${TIMESTAMP}"
          mkdir -p "${BACKUP_DIR}"
          
          # Backup important files
          echo "Backing up configuration..."
          if [ -f "${DEPLOY_PATH}/.env" ]; then
            cp "${DEPLOY_PATH}/.env" "${BACKUP_DIR}/.env.backup"
          fi
          if [ -f "${DEPLOY_PATH}/docker-compose.yml" ]; then
            cp "${DEPLOY_PATH}/docker-compose.yml" "${BACKUP_DIR}/docker-compose.yml.backup"
          fi
          
          # Update repository if necessary
          if [ -d "${DEPLOY_PATH}/repo" ]; then
            echo "Updating repository..."
            cd "${DEPLOY_PATH}/repo"
            git fetch --all
            git checkout $([ "${DEPLOY_ENV}" == "production" ] && echo "master" || echo "develop")
            git pull origin $([ "${DEPLOY_ENV}" == "production" ] && echo "master" || echo "develop")
          else
            echo "Cloning repository..."
            mkdir -p "${DEPLOY_PATH}/repo"
            git clone -b $([ "${DEPLOY_ENV}" == "production" ] && echo "master" || echo "develop") https://github.com/mlorentedev/mlorente.dev.git "${DEPLOY_PATH}/repo"
          fi
          
          # Update docker-compose.yml
          echo "Updating docker-compose.yml..."
          cp "${DEPLOY_PATH}/repo/docker-compose.yml" "${DEPLOY_PATH}/"
          
          # Set version in environment variables
          export TAG="${VERSION}"
          
          # Deploy services
          echo "Deploying services..."
          cd "${DEPLOY_PATH}"
          
          if [ "${COMPONENT}" == "all" ]; then
            docker-compose pull
            docker-compose up -d
          else
            docker-compose pull "${COMPONENT}"
            docker-compose up -d "${COMPONENT}"
          fi
          
          # Clean old images
          echo "Cleaning old images..."
          docker image prune -af --filter "until=48h"
          
          echo "===== DEPLOYMENT COMPLETED ====="
          EOF
          
          # Replace variables in the script
          sed -i "s|\${DEPLOY_ENV}|$DEPLOY_ENV|g" deploy_script.sh
          sed -i "s|\${VERSION}|$VERSION|g" deploy_script.sh
          sed -i "s|\${DEPLOY_PATH}|$DEPLOY_PATH|g" deploy_script.sh
          sed -i "s|\${COMPONENT}|$COMPONENT|g" deploy_script.sh
          
          # Transfer and execute script
          chmod +x deploy_script.sh
          scp deploy_script.sh ${{ env.SSH_USER }}@${{ env.SSH_HOST }}:/tmp/deploy_script.sh
          ssh ${{ env.SSH_USER }}@${{ env.SSH_HOST }} "bash /tmp/deploy_script.sh"
      
      - name: Verify deployment
        run: |
          # Check service status
          ssh ${{ env.SSH_USER }}@${{ env.SSH_HOST }} "cd $DEPLOY_PATH && docker-compose ps"
          
          # Show result
          echo "ðŸš€ Deployment completed to $DEPLOY_ENV"
          if [[ "$DEPLOY_ENV" == "production" ]]; then
            echo "ðŸ“± Application available at: https://mlorente.dev"
          else
            echo "ðŸ“± Application available at: https://staging.mlorente.dev"
          fi