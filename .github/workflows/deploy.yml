name: Deploy

on:
  repository_dispatch:
    types: [trigger-deploy]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Set environment from input or dispatch
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "DEPLOY_ENV=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
          else
            if [[ "${{ github.event.client_payload.ref }}" == "refs/heads/main" ]]; then
              echo "DEPLOY_ENV=production" >> $GITHUB_ENV
            else
              echo "DEPLOY_ENV=staging" >> $GITHUB_ENV
            fi
          fi

      # Optional: Slack/Telegram Deployment Notification
      - name: Send deployment start notification
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: "Deployment started for ${{ env.DEPLOY_ENV }} environment"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Setup SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          echo "$SSH_PUBLIC_KEY" > ~/.ssh/id_rsa.pub
          chmod 600 ~/.ssh/id_rsa
          chmod 644 ~/.ssh/id_rsa.pub
          ssh-keygen -y -f ~/.ssh/id_rsa > ~/.ssh/id_rsa.pub

      - name: Set environment variables
        run: |
          if [[ "$DEPLOY_ENV" == "production" ]]; then
            echo "SSH_HOST=${{ secrets.PRODUCTION_HOST }}" >> $GITHUB_ENV
            echo "SSH_USER=${{ secrets.PRODUCTION_USERNAME }}" >> $GITHUB_ENV
            echo "DEPLOY_PATH=/opt/mlorente" >> $GITHUB_ENV
            echo "DOMAIN=${{ secrets.PROD_SITE_DOMAIN }}" >> $GITHUB_ENV
          else
            echo "SSH_HOST=${{ secrets.STAGING_HOST }}" >> $GITHUB_ENV
            echo "SSH_USER=${{ secrets.STAGING_USERNAME }}" >> $GITHUB_ENV
            echo "DEPLOY_PATH=/opt/mlorente-staging" >> $GITHUB_ENV
            echo "DOMAIN=${{ secrets.STAGING_SITE_DOMAIN }}" >> $GITHUB_ENV
          fi
      
      - name: Set SSH key
        run: |
          if [[ "$DEPLOY_ENV" == "production" ]]; then
            echo "${{ secrets.PRODUCTION_SSH_KEY }}" > ssh_key
          else
            echo "${{ secrets.STAGING_SSH_KEY }}" > ssh_key
          fi
          chmod 600 ssh_key
          echo "SSH_KEY_PATH=ssh_key" >> $GITHUB_ENV

      - name: Deploy to Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          key: ${{ env.SSH_KEY_PATH }}
          script: |
            echo "Deployment started at $(date)"
            echo "Environment: ${{ env.DEPLOY_ENV }}"
            echo "Component: ${{ github.event.client_payload.component || 'all' }}"
            
            # Verificar que el directorio existe
            if [ ! -d "${{ env.DEPLOY_PATH }}" ]; then
              echo "Creating deployment directory..."
              mkdir -p ${{ env.DEPLOY_PATH }}
            fi
            
            # Navegar al directorio de despliegue
            cd ${{ env.DEPLOY_PATH }}
            
            # Actualizar el repositorio
            if [ -d "repo" ]; then
              cd repo
              git fetch --all
              git reset --hard origin/$(if [ "${{ env.DEPLOY_ENV }}" == "production" ]; then echo "main"; else echo "develop"; fi)
            else
              git clone --branch $(if [ "${{ env.DEPLOY_ENV }}" == "production" ]; then echo "main"; else echo "develop"; fi) https://github.com/${{ github.repository }}.git repo
              cd repo
            fi
            
            # Actualizar docker-compose.yml
            cp docker-compose.yml ${{ env.DEPLOY_PATH }}/
            cd ${{ env.DEPLOY_PATH }}
            
            # Generar/actualizar archivo .env único
            if [ ! -f .env ]; then
              echo "Creating new .env file..."
              cat > .env <<EOL
            # Environment: ${{ env.DEPLOY_ENV }}
            # Generated on: $(date)
            # WARNING: This file is automatically generated. Do not edit directly.
            
            # Common settings
            ENV=${{ env.DEPLOY_ENV }}
            
            # Application settings
            if [[ "${{ env.DEPLOY_ENV }}" == "production" ]]; then
              SITE_URL=${{ secrets.PROD_SITE_URL }}
            else
              SITE_URL=${{ secrets.STAGING_SITE_URL }}
            fi
            SITE_TITLE=${{ secrets.SITE_TITLE }}
            SITE_DESCRIPTION=${{ secrets.SITE_DESCRIPTION }}
            SITE_DOMAIN=${{ env.DOMAIN }}
            SITE_MAIL=${{ secrets.SITE_MAIL }}
            SITE_AUTHOR=${{ secrets.SITE_AUTHOR }}
            SITE_KEYWORDS=${{ secrets.SITE_KEYWORDS }}
            
            # Social media
            TWITTER_URL=${{ secrets.TWITTER_URL }}
            YOUTUBE_URL=${{ secrets.YOUTUBE_URL }}
            GITHUB_URL=${{ secrets.GITHUB_URL }}
            CALENDLY_URL=${{ secrets.CALENDLY_URL }}
            BUY_ME_A_COFFEE_URL=${{ secrets.BUY_ME_A_COFFEE_URL }}
            
            # Analytics
            GOOGLE_ANALYTICS_ID=${{ secrets.GOOGLE_ANALYTICS_ID }}
            
            # Feature flags
            ENABLE_HOMELABS=${{ secrets.ENABLE_HOMELABS }}
            ENABLE_BLOG=${{ secrets.ENABLE_BLOG }}
            ENABLE_CONTACT=${{ secrets.ENABLE_CONTACT }}
            
            # API credentials
            BEEHIIV_API_KEY=${{ secrets.BEEHIIV_API_KEY }}
            BEEHIIV_PUB_ID=${{ secrets.BEEHIIV_PUB_ID }}
            
            # Email settings
            EMAIL_HOST=${{ secrets.EMAIL_HOST }}
            EMAIL_PORT=${{ secrets.EMAIL_PORT }}
            EMAIL_SECURE=${{ secrets.EMAIL_SECURE }}
            EMAIL_USER=${{ secrets.EMAIL_USER }}
            EMAIL_PASS=${{ secrets.EMAIL_PASS }}
            EOL
            else
              echo "Updating existing .env file..."
              # Actualizar solo las variables que cambian entre entornos
              sed -i "s|^ENV=.*|ENV=${{ env.DEPLOY_ENV }}|g" .env
              if [[ "${{ env.DEPLOY_ENV }}" == "production" ]]; then
                sed -i "s|^SITE_URL=.*|SITE_URL=${{ secrets.PROD_SITE_URL }}|g" .env
              else
                sed -i "s|^SITE_URL=.*|SITE_URL=${{ secrets.STAGING_SITE_URL }}|g" .env
              fi
              sed -i "s|^SITE_DOMAIN=.*|SITE_DOMAIN=${{ env.DOMAIN }}|g" .env
            fi
            
            # Asegurar directorio para certificados
            mkdir -p certbot/conf certbot/www
            
            # Actualizar imágenes y reiniciar contenedores
            echo "Pulling latest images..."
            docker-compose pull
            
            echo "Restarting services..."
            docker-compose up -d
            
            # Limpieza de imágenes no utilizadas
            echo "Cleaning up..."
            docker image prune -af --filter "until=24h"
            
            echo "Deployment to ${{ env.DEPLOY_ENV }} completed successfully!"

      # Optional: Send deployment completion notification
      - name: Send deployment completion notification
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: "Deployment completed for ${{ env.DEPLOY_ENV }} environment"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}            