name: Setup GitHub Environments

on:
  workflow_dispatch:
    inputs:
      production_required_reviewers:
        description: 'Number of approvals required for production'
        required: false
        default: '1'
        type: string
      production_wait_timer:
        description: 'Wait time in minutes before deployment to production'
        required: false
        default: '1'
        type: string

jobs:
  setup-environments:
    name: Setup GitHub Environments
    runs-on: ubuntu-latest
    steps:
      - name: Create Staging Environment
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.REPO_TOKEN }}
          script: |
            try {
              console.log('Creating staging environment...');
              await github.rest.repos.createOrUpdateEnvironment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                environment_name: 'staging',
                deployment_branch_policy: null
              });
              console.log('Staging environment created successfully');
            } catch (error) {
              console.error('Error creating staging environment:', error);
              throw error;
            }

      - name: Create Production Environment
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.REPO_TOKEN }}
          script: |
            try {
              console.log('Creating production environment...');
              await github.rest.repos.createOrUpdateEnvironment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                environment_name: 'production',
                wait_timer: parseInt('${{ github.event.inputs.production_wait_timer }}'),
                reviewers: Array.from(
                  { length: parseInt('${{ github.event.inputs.production_required_reviewers }}') },
                  (_, i) => ({ type: 'User', id: context.payload.sender.id })
                ),
                deployment_branch_policy: {
                  protected_branches: true,
                  custom_branch_policies: false
                }
              });
              console.log('Production environment created successfully');
            } catch (error) {
              console.error('Error creating production environment:', error);
              throw error;
            }