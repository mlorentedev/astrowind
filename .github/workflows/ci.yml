name: Continuous Integration

on:
  push:
    branches: [master, develop, "feature/*", "hotfix/*"]
    paths:
      - 'frontend/**'
      - 'backend/**'
      - 'core/**'
      - '.github/workflows/ci.yml'
  pull_request:
    branches: [master, develop]
    paths:
      - 'frontend/**'
      - 'backend/**'
      - 'core/**'
      - '.github/workflows/ci.yml'
  workflow_dispatch:
  
jobs:
  validate:
    name: Validate Static Site
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.check.outputs.should_build }}    
    permissions:
      contents: write
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Determine build status
        id: check
        run: |
          # Skip build on drafts PRs
          if [[ "${{ github.event_name }}" == "pull_request" && "${{ github.event.pull_request.draft }}" == "true" ]]; then
            echo "should_build=false" >> $GITHUB_OUTPUT
            echo "Skipping build for draft PR"
          else
            echo "should_build=true" >> $GITHUB_OUTPUT
          fi    

  security-scan:
    name: Security Scan
    needs: validate
    if: needs.validate.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Scan for secrets
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Check for outdated dependencies
        working-directory: './frontend'
        run: |
          gem install bundler-audit
          bundle-audit check --update || true

  build:
    name: Build Jekyll Site
    needs: security-scan
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set-version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set version info
        id: set-version
        run: |
          SHA_SHORT=${GITHUB_SHA::8}
          
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            ENV="${{ github.event.inputs.environment }}"
          elif [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
            ENV="production"
          else
            ENV="staging"
          fi
          
          if [[ "$ENV" == "production" ]]; then
            echo "version=latest" >> $GITHUB_OUTPUT
          else
            echo "version=develop" >> $GITHUB_OUTPUT
          fi
          
          echo "environment=$ENV" >> $GITHUB_OUTPUT
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3'
          working-directory: './frontend'
          bundler-cache: true
                
      - name: Install dependencies
        working-directory: './frontend'
        run: bundle install
        
      - name: Build Jekyll site
        working-directory: './frontend'
        env:
          JEKYLL_ENV: ${{ steps.set-version.outputs.environment }}
        run: bundle exec jekyll build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: jekyll-build
          path: frontend/_site
          retention-days: 7  
                
  docker:
    name: Build & Push Docker Image
    needs: build
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps: 
      - uses: actions/checkout@v4
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: jekyll-build
          path: frontend/_site

      - name: Create version tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.REPO_TOKEN }}
          release_branches: master
          pre_release_branches: develop
          default_bump: patch
          tag_prefix: ''

      - name: Check if tag exists and delete it
        run: |
          TAG_NAME=${{ steps.tag_version.outputs.new_version }}
          if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
            echo "Tag $TAG_NAME already exists. Deleting..."
            git tag -d "$TAG_NAME"
            git push origin --delete "$TAG_NAME"
          fi
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
          
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
            
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.ARTIFACT_NAME }}
          tags: |
            type=raw,value=${{ secrets.ENVIRONMENT }}-sha-{{sha}}
            type=raw,value=${{ secrets.ENVIRONMENT }}-latest,enable={{is_default_branch}}
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  release-artifacts:
    name: Create Release Artifacts
    needs: [build, docker]
    if: (github.event_name == 'push' && github.ref == 'refs/heads/master') || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: jekyll-build
          path: frontend/_site

      - name: Create deployment package
        run: |
          mkdir -p deployment
          
          # Copy infrastructure files
          mkdir -p deployment/core/infrastructure
          cp -r core/infrastructure/docker-compose deployment/core/infrastructure/
          cp -r core/infrastructure/scripts deployment/core/infrastructure/
          cp -r core/infrastructure/traefik deployment/core/infrastructure/
          
          # Create sample environment files if not exists
          for ENV in staging production
          do
            if [ ! -f "core/infrastructure/docker-compose/docker-compose.$ENV.yml" ]; then
              echo "WARNING: docker-compose.$ENV.yml not found, using docker-compose.template.yml"
            fi
          done
          
          # Create release package
          cd deployment
          zip -r ../release-${{ steps.tag_version.outputs.new_version }}.zip .
          
      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deployment-files
          path: deployment
          retention-days: 7

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.tag_version.outputs.new_version }}
          name: Release ${{ steps.tag_version.outputs.new_version }}
          artifacts: "release-${{ steps.tag_version.outputs.new_version }}.zip"
          token: ${{ secrets.GITHUB_TOKEN }}