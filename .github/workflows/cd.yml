name: Ansible CD Pipeline

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      version:
        description: 'Version to deploy'
        required: false
        type: string
  
  workflow_run:
    workflows: ["CI Pipeline"]
    branches: [master, develop]
    types:
      - completed

jobs:
  deploy:
    name: Deploy with Ansible
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set environment
        id: set-env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "ENVIRONMENT=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
            if [[ -n "${{ github.event.inputs.version }}" ]]; then
              echo "TAG_VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
            elif [[ "${{ github.event.inputs.environment }}" == "production" ]]; then
              echo "TAG_VERSION=latest" >> $GITHUB_ENV
            else
              echo "TAG_VERSION=develop" >> $GITHUB_ENV
            fi
          else
            if [[ "${{ github.event.workflow_run.head_branch }}" == "master" ]]; then
              echo "ENVIRONMENT=production" >> $GITHUB_ENV
              echo "TAG_VERSION=latest" >> $GITHUB_ENV
            else
              echo "ENVIRONMENT=staging" >> $GITHUB_ENV
              echo "TAG_VERSION=develop" >> $GITHUB_ENV
            fi
          fi

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible

      - name: Create SSH key files
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -t rsa mlorente.dev >> ~/.ssh/known_hosts
          ssh-keyscan -t rsa staging.mlorente.dev >> ~/.ssh/known_hosts
      
      - name: Verify Ansible inventory
        run: |
          echo "Using inventory: ansible/inventories/${{ env.ENVIRONMENT }}.yml"
          ansible-inventory --inventory ansible/inventories/${{ env.ENVIRONMENT }}.yml --graph

      - name: Run Ansible playbook
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          GOOGLE_ANALYTICS_ID: ${{ secrets.GOOGLE_ANALYTICS_ID }}
        run: |
          ansible-playbook \
            -i ansible/inventories/${{ env.ENVIRONMENT }}.yml \
            -e "tag_version=${{ env.TAG_VERSION }}" \
            -e "dockerhub_username=${{ env.DOCKERHUB_USERNAME }}" \
            -e "google_analytics_id=${{ env.GOOGLE_ANALYTICS_ID }}" \
            ansible/playbooks/deploy.yml \
            -v

      - name: Verify deployment
        run: |
          # Verificar que el sitio responde
          DOMAIN="${{ env.ENVIRONMENT == 'production' && 'mlorente.dev' || 'staging.mlorente.dev' }}"
          MAX_RETRIES=10
          COUNT=0
          
          echo "Verificando despliegue en https://$DOMAIN"
          
          while [ $COUNT -lt $MAX_RETRIES ]; do
            STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" "https://$DOMAIN")
            
            if [ "$STATUS_CODE" -eq 200 ]; then
              echo "✅ Sitio disponible ($STATUS_CODE)"
              break
            else
              echo "⏳ Esperando a que el sitio esté disponible (intento $COUNT, código $STATUS_CODE)"
              COUNT=$((COUNT + 1))
              
              if [ $COUNT -eq $MAX_RETRIES ]; then
                echo "❌ No se pudo verificar el despliegue después de $MAX_RETRIES intentos"
                exit 1
              fi
              
              sleep 10
            fi
          done