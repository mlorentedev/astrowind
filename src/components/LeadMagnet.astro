---
// src/components/LeadMagnet.astro
// Un componente reutilizable para todos tus lead magnets

// Propiedades del lead magnet
const { 
  resourceId = "",               // ID único del recurso
  title = "Recurso exclusivo",   // Título del lead magnet
  description = "",              // Descripción breve
  buttonText = "Descargar ahora", // Texto del botón
  imageUrl = "",                 // URL de la imagen (opcional)
  tags = []                      // Tags para Beehiiv (opcional)
} = Astro.props;
---

<div class="lead-magnet-form bg-cyan-700 text-white p-6 rounded-lg max-w-md mx-auto my-6">
  <form 
    class="flex flex-col gap-6"
    id="lead-magnet-form"
    data-resource-id={resourceId}
    data-tags={tags.join(",")}
  >
    {imageUrl && (
      <div class="lead-magnet-image mb-4">
        <img 
          src={imageUrl} 
          alt={title} 
          class="rounded-lg w-full h-auto shadow-md"
        />
      </div>
    )}
    
    <div class="lead-magnet-header">
      <h3 class="text-xl font-bold mb-2">{title}</h3>
      {description && <p class="text-sm opacity-90 mb-2">{description}</p>}
    </div>
    
    <input
      type="email"
      name="email"
      placeholder="Tu correo electrónico"
      required
      class="w-full p-3 text-gray-700 rounded-md text-sm focus:outline-none focus:ring-1 focus:ring-cyan-300"
    />   
    
    <button
      type="submit"
      class="w-full px-4 py-3 bg-white text-cyan-700 rounded-md text-sm font-medium hover:bg-cyan-100 transition-colors"
    >
      {buttonText}
    </button>
    
    <div class="flex items-center justify-center text-center text-xs">
      <input type="checkbox" id="privacy-policy" name="privacy-policy" required class="mr-2">
      <label for="privacy-policy">
        Acepto la <a href="/privacy-policy" target="_blank" class="underline">política de privacidad</a>
      </label>
    </div>
  </form>
  
  <div id="success-message" class="mt-4 p-4 bg-green-600 rounded-lg text-center hidden">
    <p class="font-medium">¡Gracias! Revisa tu correo electrónico.</p>
    <p class="text-sm mt-2">Hemos enviado el recurso a tu bandeja de entrada.</p>
  </div>
  
  <div id="error-message" class="mt-4 p-4 bg-red-600 rounded-lg text-center hidden">
    <p class="font-medium">Ha ocurrido un error</p>
    <p class="text-sm mt-2" id="error-details">Por favor, inténtalo de nuevo más tarde.</p>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('lead-magnet-form') as HTMLFormElement;
    const successMessage = document.getElementById('success-message');
    const errorMessage = document.getElementById('error-message');
    const errorDetails = document.getElementById('error-details');
    
    if (!form || !successMessage || !errorMessage || !errorDetails) return;
    
    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      // Obtener los datos del formulario
      const emailInput = form.querySelector('input[name="email"]') as HTMLInputElement;
      const email = emailInput?.value;
      const resourceId = form.dataset.resourceId || '';
      const tagsString = form.dataset.tags || '';
      const tags = tagsString ? tagsString.split(',') : [];
      
      // Verificar que aceptaron la política de privacidad
      const privacyPolicy = (form.querySelector('input[name="privacy-policy"]') as HTMLInputElement)?.checked;
      
      if (!privacyPolicy) {
        showError('Debes aceptar la política de privacidad');
        return;
      }
      
      if (!email) {
        showError('Por favor, introduce tu correo electrónico');
        return;
      }
      
      // Deshabilitar el formulario durante el proceso
      setFormState(form, 'loading');
      
      try {
        // Enviar la solicitud al servidor
        const response = await fetch('/api/resource-access', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ 
            email, 
            resourceId,
            tags
          }),
        });
        
        const data = await response.json();
        
        if (data.success) {
          // Mostrar mensaje de éxito
          setFormState(form, 'success');
          form.classList.add('hidden');
          successMessage.classList.remove('hidden');
        } else {
          // Mostrar mensaje de error
          showError(data.message || 'No pudimos procesar tu solicitud');
          setFormState(form, 'error');
        }
      } catch (error) {
        // Mostrar mensaje de error
        console.error('Error:', error);
        showError('Ocurrió un error al conectar con el servidor');
        setFormState(form, 'error');
      }
    });
    
    function showError(message: string) {
      errorMessage?.classList.remove('hidden');
      if (errorDetails) {
        errorDetails.textContent = message;
      }
      
      setTimeout(() => {
        errorMessage?.classList.add('hidden');
      }, 5000);
    }
    
    function setFormState(form: HTMLFormElement, state: 'loading' | 'success' | 'error') {
      const submitButton = form.querySelector('button[type="submit"]') as HTMLButtonElement;
      const emailInput = form.querySelector('input[name="email"]') as HTMLInputElement;
      
      if (!submitButton || !emailInput) return;
      
      if (state === 'loading') {
        submitButton.disabled = true;
        submitButton.textContent = 'Procesando...';
        emailInput.disabled = true;
      } else {
        submitButton.disabled = false;
        submitButton.textContent = submitButton.getAttribute('data-original-text') || 'Descargar ahora';
        emailInput.disabled = false;
      }
    }
  });
</script>