---
// src/components/InlineLeadMagnet.astro
// Un componente más compacto para insertar dentro de artículos del blog

const { 
  resourceId = "",
  title = "Recurso relacionado",
  description = "",
  buttonText = "Descargar",
  tags = []
} = Astro.props;
---

<div class="bg-gray-50 border border-gray-200 rounded-lg p-5 my-8">
  <div class="flex flex-col sm:flex-row gap-4">
    <div class="flex-1">
      <h3 class="text-lg font-bold text-gray-900 mb-2">{title}</h3>
      {description && <p class="text-sm text-gray-700 mb-4">{description}</p>}
    </div>
    
    <div class="sm:w-52">
      <form 
        class="inline-lead-magnet-form"
        data-resource-id={resourceId}
        data-tags={tags.join(",")}
      >
        <input
          type="email"
          name="email"
          placeholder="Tu email"
          required
          class="w-full p-2 text-gray-700 text-sm border border-gray-300 rounded-md mb-2"
        />
        
        <button
          type="submit"
          class="w-full px-3 py-2 bg-cyan-700 text-white text-sm font-medium rounded-md hover:bg-cyan-800 transition-colors"
        >
          {buttonText}
        </button>
        
        <div class="text-xs text-gray-500 mt-2">
          <label class="flex items-center">
            <input type="checkbox" required class="mr-1">
            <span>Acepto la <a href="/privacy-policy" class="underline">política de privacidad</a></span>
          </label>
        </div>
      </form>
      
      <div class="success-message hidden mt-2 text-green-600 text-sm text-center font-medium">
        ¡Recurso enviado! Revisa tu email.
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('.inline-lead-magnet-form').forEach((form) => {
      form.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const emailInput = form.querySelector('input[name="email"]') as HTMLInputElement;
        const email = emailInput?.value;
        const resourceId = (form as HTMLElement).dataset.resourceId || '';
        const tagsString = (form as HTMLElement).dataset.tags || '';
        const tags = tagsString ? tagsString.split(',') : [];
        
        const submitButton = form.querySelector('button[type="submit"]') as HTMLButtonElement;
        const originalButtonText = submitButton.textContent || 'Descargar';
        
        if (submitButton) {
          submitButton.disabled = true;
          submitButton.textContent = 'Enviando...';
        }
        
        try {
          // Enviar la solicitud al servidor
          const response = await fetch('/api/resource-access', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ 
              email, 
              resourceId,
              tags
            }),
          });
          
          const data = await response.json();
          
          if (data.success) {
            // Mostrar mensaje de éxito
            form.classList.add('hidden');
            const successMessage = (form.parentElement as HTMLElement).querySelector('.success-message');
            if (successMessage) {
              successMessage.classList.remove('hidden');
            }
          } else {
            // Mostrar mensaje de error
            alert(data.message || 'No pudimos procesar tu solicitud');
            if (submitButton) {
              submitButton.disabled = false;    
              submitButton.textContent = originalButtonText;
            }
          }
        } catch (error) {
          console.error('Error:', error);
          alert('Ocurrió un error al conectar con el servidor');
          if (submitButton) {
            submitButton.disabled = false;
            submitButton.textContent = originalButtonText;
          }
        }
      });
    });
  });
</script>