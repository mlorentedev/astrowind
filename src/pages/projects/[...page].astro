---
import FormattedDate from '../../components/common/FormattedDate.astro';
import BaseLayout from '../../layouts/BaseLayout.astro';
import SectionHeader from '../../components/sections/SectionHeader.astro';
import { getCollection } from 'astro:content';

const today = new Date();
const { page } = Astro.props as { page: { data: Project[] } };

const projectsTitle = 'HomeLabs';
const projectsSubtitle = 'Mi colección de laboratorios cloud para aprender haciendo';

const colors = {
  beginner: 'bg-green-100 text-green-800',
  intermediate: 'bg-yellow-100 text-yellow-800',
  advanced: 'bg-red-100 text-red-800',
};

interface Project {
  project_slug: string;
  data: {
    description: string;
    title: string;
    pubDate: Date;
    updatedDate?: Date;
    heroImage?: string;
    pdf_url?: string;
    video_url?: string;
    githubRepo?: string;
    tags?: string[];
    level?: 'beginner' | 'intermediate' | 'advanced';
  };
}

export async function getStaticPaths(
  {
    paginate,
  }: {
    paginate: (items: any[], options: { pageSize: number }) => any;
  },
  today = new Date()
) {
  const _projects = await getCollection('projects');
  const projects_filtered = _projects
    .filter((project) => new Date(project.data.pubDate) <= today)
    .map((project) => ({
      ...project,
      project_slug: project.id,
    }))
    .sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());
  return paginate(projects_filtered, { pageSize: 10 });
}

function getLevelColor(level: keyof typeof colors | undefined) {
  if (!level) return '';

  return colors[level] || '';
}
---

<BaseLayout
  title={projectsTitle}
  description={projectsSubtitle}
  pubDate={today}
  resourceId=""
  fileId=""
  tags={[]}
  buttonText=""
>
  <div class="px-4 py-8">
    <SectionHeader title={projectsTitle} subtitle={projectsSubtitle} />

    <div class="max-w-4xl mx-auto grid md:grid-cols-2 gap-6">
      {
        page.data.map((project) => (
          <div class="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow">
            {project.data.heroImage && (
              <div class="h-48 overflow-hidden">
                <img
                  src={project.data.heroImage}
                  alt={project.data.title}
                  class="w-full h-full object-cover"
                />
              </div>
            )}

            <div class="p-6">
              <h2 class="text-xl font-bold text-gray-800 mb-2">{project.data.title}</h2>

              <p class="text-gray-600 mb-4 line-clamp-2">{project.data.description}</p>

              <div class="flex flex-wrap gap-2 mb-4">
                {project.data.level && (
                  <span
                    class={`px-3 py-1 rounded-full text-xs font-medium ${getLevelColor(project.data.level)}`}
                  >
                    {project.data.level}
                  </span>
                )}

                {project.data.tags &&
                  project.data.tags
                    .slice(0, 3)
                    .map((tag) => (
                      <span class="px-3 py-1 bg-cyan-100 text-cyan-800 rounded-full text-xs">
                        {tag}
                      </span>
                    ))}
              </div>

              <div class="flex justify-between items-center">
                <p class="text-gray-500 text-sm">
                  <FormattedDate date={project.data.updatedDate || project.data.pubDate} />
                </p>

                <a
                  href={`/projects/${project.project_slug}`}
                  class="text-cyan-700 font-medium hover:underline"
                >
                  Ver más →
                </a>
              </div>
            </div>
          </div>
        ))
      }
    </div>
  </div>
</BaseLayout>
